use teensy4_bsp::board;

use crate::framebuffer::{BackBuffer, FrontBuffer};

mod hue_cycle;
mod rain;

pub use rain::Rain;

#[repr(u32)]
#[rustfmt::skip]
#[derive(Copy, Clone)]
// The u32 representation of FrameRate
pub enum FrameRate {
    Fps32768 = 0b11111111111111111111111111111111_u32,
    Fps16384 = 0b11111111111111111111111111111110_u32,
    Fps8192  = 0b11111111111111111111111111111100_u32,
    Fps4096  = 0b11111111111111111111111111111000_u32,
    Fps2048  = 0b11111111111111111111111111110000_u32,
    Fps1024  = 0b11111111111111111111111111100000_u32,
    Fps512   = 0b11111111111111111111111111000000_u32,
    Fps256   = 0b11111111111111111111111110000000_u32,
    Fps128   = 0b11111111111111111111111100000000_u32,
    Fps64    = 0b11111111111111111111111000000000_u32,
    Fps32    = 0b11111111111111111111110000000000_u32,
    Fps16    = 0b11111111111111111111100000000000_u32,
    Fps8     = 0b11111111111111111111000000000000_u32,
    Fps4     = 0b11111111111111111110000000000000_u32,
    Fps2     = 0b11111111111111111100000000000000_u32,
    Fps1     = 0b11111111111111111000000000000000_u32,
    Spf2     = 0b11111111111111110000000000000000_u32,
    Spf4     = 0b11111111111111100000000000000000_u32,
    Spf8     = 0b11111111111111000000000000000000_u32,
    Spf16    = 0b11111111111110000000000000000000_u32,
    Spf32    = 0b11111111111100000000000000000000_u32,
    Spf64    = 0b11111111111000000000000000000000_u32,
    Spf128   = 0b11111111110000000000000000000000_u32,
    Spf256   = 0b11111111100000000000000000000000_u32,
    Spf512   = 0b11111111000000000000000000000000_u32,
    Spf1024  = 0b11111110000000000000000000000000_u32,
    Spf2048  = 0b11111100000000000000000000000000_u32,
    Spf4096  = 0b11111000000000000000000000000000_u32,
    Spf8192  = 0b11110000000000000000000000000000_u32,
    Spf16384 = 0b11100000000000000000000000000000_u32,
    Spf32768 = 0b11000000000000000000000000000000_u32,
    Spf65536 = 0b10000000000000000000000000000000_u32,
}

impl FrameRate {
    pub const fn get_rtc_mask(&self) -> u32 {
        *self as u32
    }
}

pub trait Program {
    fn frame_rate() -> FrameRate;
    fn init(&mut self, back_buffer: &mut BackBuffer);
    fn process_chunk(&mut self, front_buffer: &FrontBuffer, back_buffer: &mut BackBuffer);
    fn frame_finished(&mut self, back_buffer: &mut BackBuffer);
}
